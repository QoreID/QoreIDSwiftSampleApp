// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name QoreIDSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import BackgroundTasks
import CommonCrypto
import Contacts
import CoreImage
import CoreLocation
import CoreMotion
import FaceTecSDK
import Foundation
import ImageIO
import MapKit
import MobileCoreServices
import NotificationCenter
import Photos
import PhotosUI
@_exported import QoreIDSDK
import QuartzCore
import Swift
import UIKit.UIGestureRecognizerSubclass
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
public typealias MetadataCallback = (() throws -> Foundation.Data?)
@objc final public class PhoneNumberKit : ObjectiveC.NSObject {
  public init(metadataCallback: @escaping QoreIDSDK.MetadataCallback = PhoneNumberKit.defaultMetadataCallback)
  final public func parse(_ numberString: Swift.String, withRegion region: Swift.String = PhoneNumberKit.defaultRegionCode(), ignoreType: Swift.Bool = false) throws -> QoreIDSDK.PhoneNumber
  final public func parse(_ numberStrings: [Swift.String], withRegion region: Swift.String = PhoneNumberKit.defaultRegionCode(), ignoreType: Swift.Bool = false, shouldReturnFailedEmptyNumbers: Swift.Bool = false) -> [QoreIDSDK.PhoneNumber]
  final public func isValidPhoneNumber(_ numberString: Swift.String, withRegion region: Swift.String = PhoneNumberKit.defaultRegionCode(), ignoreType: Swift.Bool = false) -> Swift.Bool
  final public func format(_ phoneNumber: QoreIDSDK.PhoneNumber, toType formatType: QoreIDSDK.PhoneNumberFormat, withPrefix prefix: Swift.Bool = true) -> Swift.String
  final public func allCountries() -> [Swift.String]
  final public func countries(withCode countryCode: Swift.UInt64) -> [Swift.String]?
  final public func mainCountry(forCode countryCode: Swift.UInt64) -> Swift.String?
  final public func countryCode(for country: Swift.String) -> Swift.UInt64?
  final public func leadingDigits(for country: Swift.String) -> Swift.String?
  final public func getRegionCode(of phoneNumber: QoreIDSDK.PhoneNumber) -> Swift.String?
  final public func getExampleNumber(forCountry countryCode: Swift.String, ofType type: QoreIDSDK.PhoneNumberType = .mobile) -> QoreIDSDK.PhoneNumber?
  final public func getFormattedExampleNumber(forCountry countryCode: Swift.String, ofType type: QoreIDSDK.PhoneNumberType = .mobile, withFormat format: QoreIDSDK.PhoneNumberFormat = .international, withPrefix prefix: Swift.Bool = true) -> Swift.String?
  final public func metadata(for country: Swift.String) -> QoreIDSDK.MetadataTerritory?
  final public func metadata(forCode countryCode: Swift.UInt64) -> [QoreIDSDK.MetadataTerritory]?
  final public func possiblePhoneNumberLengths(forCountry country: Swift.String, phoneNumberType: QoreIDSDK.PhoneNumberType, lengthType: QoreIDSDK.PossibleLengthType) -> [Swift.Int]
  final public class func defaultRegionCode() -> Swift.String
  public static func defaultMetadataCallback() throws -> Foundation.Data?
  @objc deinit
}
extension QoreIDSDK.PhoneNumberKit {
  public enum CountryCodePicker {
    public static var commonCountryCodes: [Swift.String]
    public static var forceModalPresentation: Swift.Bool
  }
}
public enum EnvironmentConfig {
  case development
  case production
  case staging
  public static func == (a: QoreIDSDK.EnvironmentConfig, b: QoreIDSDK.EnvironmentConfig) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ConfigurationEnvManager {
  @objc deinit
}
public enum PhoneNumberError : Swift.Error, Swift.Equatable {
  case generalError
  case invalidCountryCode
  case invalidNumber
  case tooLong
  case tooShort
  case deprecated
  case metadataNotFound
  case ambiguousNumber(phoneNumbers: Swift.Set<QoreIDSDK.PhoneNumber>)
  public static func == (a: QoreIDSDK.PhoneNumberError, b: QoreIDSDK.PhoneNumberError) -> Swift.Bool
}
extension QoreIDSDK.PhoneNumberError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PhoneNumberFormat {
  case e164
  case international
  case national
  public static func == (a: QoreIDSDK.PhoneNumberFormat, b: QoreIDSDK.PhoneNumberFormat) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PhoneNumberType : Swift.String, Swift.Codable {
  case fixedLine
  case mobile
  case fixedOrMobile
  case pager
  case personalNumber
  case premiumRate
  case sharedCost
  case tollFree
  case voicemail
  case voip
  case uan
  case unknown
  case notParsed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PossibleLengthType : Swift.String, Swift.Codable {
  case national
  case localOnly
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc open class PhoneNumberFormatter : Foundation.Formatter {
  final public let phoneNumberKit: QoreIDSDK.PhoneNumberKit
  @objc dynamic public var generatesPhoneNumber: Swift.Bool
  @objc dynamic public var defaultRegion: Swift.String {
    @objc get
    @objc set
  }
  @objc dynamic public var withPrefix: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var currentRegion: Swift.String {
    @objc get
  }
  public init(phoneNumberKit pnk: QoreIDSDK.PhoneNumberKit = PhoneNumberKit(), defaultRegion: Swift.String = PhoneNumberKit.defaultRegionCode(), withPrefix: Swift.Bool = true)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension QoreIDSDK.PhoneNumberFormatter {
  @objc override dynamic open func string(for obj: Any?) -> Swift.String?
  @objc override dynamic open func getObjectValue(_ obj: Swift.AutoreleasingUnsafeMutablePointer<Swift.AnyObject?>?, for string: Swift.String, errorDescription error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?) -> Swift.Bool
  @objc override dynamic open func isPartialStringValid(_ partialStringPtr: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString>, proposedSelectedRange proposedSelRangePtr: Foundation.NSRangePointer?, originalString origString: Swift.String, originalSelectedRange origSelRange: Foundation.NSRange, errorDescription error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?) -> Swift.Bool
}
public struct MetadataTerritory : Swift.Decodable {
  public let codeID: Swift.String
  public let countryCode: Swift.UInt64
  public let internationalPrefix: Swift.String?
  public let mainCountryForCode: Swift.Bool
  public let nationalPrefix: Swift.String?
  public let nationalPrefixFormattingRule: Swift.String?
  public let nationalPrefixForParsing: Swift.String?
  public let nationalPrefixTransformRule: Swift.String?
  public let preferredExtnPrefix: Swift.String?
  public let emergency: QoreIDSDK.MetadataPhoneNumberDesc?
  public let fixedLine: QoreIDSDK.MetadataPhoneNumberDesc?
  public let generalDesc: QoreIDSDK.MetadataPhoneNumberDesc?
  public let mobile: QoreIDSDK.MetadataPhoneNumberDesc?
  public let pager: QoreIDSDK.MetadataPhoneNumberDesc?
  public let personalNumber: QoreIDSDK.MetadataPhoneNumberDesc?
  public let premiumRate: QoreIDSDK.MetadataPhoneNumberDesc?
  public let sharedCost: QoreIDSDK.MetadataPhoneNumberDesc?
  public let tollFree: QoreIDSDK.MetadataPhoneNumberDesc?
  public let voicemail: QoreIDSDK.MetadataPhoneNumberDesc?
  public let voip: QoreIDSDK.MetadataPhoneNumberDesc?
  public let uan: QoreIDSDK.MetadataPhoneNumberDesc?
  public let numberFormats: [QoreIDSDK.MetadataPhoneNumberFormat]
  public let leadingDigits: Swift.String?
}
public struct MetadataPhoneNumberDesc : Swift.Decodable {
  public let exampleNumber: Swift.String?
  public let nationalNumberPattern: Swift.String?
  public let possibleNumberPattern: Swift.String?
  public let possibleLengths: QoreIDSDK.MetadataPossibleLengths?
  public init(from decoder: any Swift.Decoder) throws
}
public struct MetadataPossibleLengths : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct MetadataPhoneNumberFormat : Swift.Decodable {
  public let pattern: Swift.String?
  public let format: Swift.String?
  public let intlFormat: Swift.String?
  public let leadingDigitsPatterns: [Swift.String]?
  public var nationalPrefixFormattingRule: Swift.String?
  public let nationalPrefixOptionalWhenFormatting: Swift.Bool?
  public let domesticCarrierCodeFormattingRule: Swift.String?
}
extension CoreFoundation.CGFloat {
  public static let cornerRadius05x: CoreFoundation.CGFloat
  public static let cornerRadius1x: CoreFoundation.CGFloat
  public static let cornerRadius2x: CoreFoundation.CGFloat
  public static let cornerRadius3x: CoreFoundation.CGFloat
  public static let cornerRadius4x: CoreFoundation.CGFloat
  public static let margin05x: CoreFoundation.CGFloat
  public static let margin1x: CoreFoundation.CGFloat
  public static let margin2x: CoreFoundation.CGFloat
  public static let margin3x: CoreFoundation.CGFloat
  public static let margin4x: CoreFoundation.CGFloat
  public static let margin6x: CoreFoundation.CGFloat
  public static let margin8x: CoreFoundation.CGFloat
  public static let margin10x: CoreFoundation.CGFloat
  public static let margin12x: CoreFoundation.CGFloat
  public static let margin16x: CoreFoundation.CGFloat
  public static let margin20x: CoreFoundation.CGFloat
  public static let marginTextSide: CoreFoundation.CGFloat
  public static let heightOnePixel: CoreFoundation.CGFloat
  public static let heightOneDp: CoreFoundation.CGFloat
  public static let heightSingleLineCell: CoreFoundation.CGFloat
  public static let heightDoubleLineCell: CoreFoundation.CGFloat
  public static let heightSingleLineInput: CoreFoundation.CGFloat
  public static let heightDoubleLineInput: CoreFoundation.CGFloat
  public static let heightButton: CoreFoundation.CGFloat
  public static let heightButtonSecondary: CoreFoundation.CGFloat
  public static let heightBottomWrapperBarMid: CoreFoundation.CGFloat
  public static let size5: CoreFoundation.CGFloat
  public static let size10: CoreFoundation.CGFloat
  public static let size15: CoreFoundation.CGFloat
  public static let size20: CoreFoundation.CGFloat
  public static let lineHeight: CoreFoundation.CGFloat
  public static let size18: CoreFoundation.CGFloat
  public static let size25: CoreFoundation.CGFloat
  public static let size30: CoreFoundation.CGFloat
  public static let size35: CoreFoundation.CGFloat
  public static let size40: CoreFoundation.CGFloat
  public static let size45: CoreFoundation.CGFloat
  public static let size50: CoreFoundation.CGFloat
  public static let size60: CoreFoundation.CGFloat
  public static let size100: CoreFoundation.CGFloat
}
extension UIKit.UIFont {
  public static let systemFont16Regular: UIKit.UIFont
  public static let systemFont14Regular: UIKit.UIFont
  public static let systemFont16Bold: UIKit.UIFont
  public static let systemFont14Bold: UIKit.UIFont
  public static let systemFont16Medium: UIKit.UIFont
  public static let systemFont18Medium: UIKit.UIFont
  public static let systemFont14Medium: UIKit.UIFont
  public static let systemFont12Medium: UIKit.UIFont
  public static let systemFont12Regular: UIKit.UIFont
  public static let systemFont9Regular: UIKit.UIFont
  public static let systemFont26Medium: UIKit.UIFont
  public static let systemFont24Medium: UIKit.UIFont
  public static let systemFont12Bold: UIKit.UIFont
  public static let systemFont34Bold: UIKit.UIFont
  public static let systemFont36Bold: UIKit.UIFont
}
extension UIKit.UIColor {
  public static let textColor: UIKit.UIColor
}
extension UIKit.UIColor {
  public static let genColor: UIKit.UIColor
}
public struct Response {
  public init(data: Foundation.Data)
}
extension QoreIDSDK.Response {
  public func decode<T>(_ type: T.Type) -> T? where T : Swift.Decodable, T : Swift.Encodable
}
@_hasMissingDesignatedInitializers public class LocalStorage {
  @objc deinit
}
public struct PhoneNumber {
  public let numberString: Swift.String
  public let countryCode: Swift.UInt64
  public let leadingZero: Swift.Bool
  public let nationalNumber: Swift.UInt64
  public let numberExtension: Swift.String?
  public let type: QoreIDSDK.PhoneNumberType
  public let regionID: Swift.String?
}
extension QoreIDSDK.PhoneNumber : Swift.Equatable {
  public static func == (lhs: QoreIDSDK.PhoneNumber, rhs: QoreIDSDK.PhoneNumber) -> Swift.Bool
}
extension QoreIDSDK.PhoneNumber : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension QoreIDSDK.PhoneNumber {
  public static func notPhoneNumber() -> QoreIDSDK.PhoneNumber
  public func notParsed() -> Swift.Bool
  public var url: Foundation.URL? {
    get
  }
}
extension QoreIDSDK.PhoneNumber {
  @available(*, unavailable, message: "use PhoneNumberKit instead to produce PhoneNumbers")
  public init(rawNumber: Swift.String) throws
  @available(*, unavailable, message: "use PhoneNumberKit instead to produce PhoneNumbers")
  public init(rawNumber: Swift.String, region: Swift.String) throws
}
public class QoreIDParam {
  public init()
  public func clientId(clientId: Swift.String?) -> QoreIDSDK.QoreIDParam
  public func customerReference(_ customerReference: Swift.String?) -> QoreIDSDK.QoreIDParam
  public func inputData(_ inputData: QoreIDSDK.InputData?) -> QoreIDSDK.QoreIDParam
  public func collection(_ productCode: Swift.String) -> QoreIDSDK.QoreIDParam
  public func workFlow(_ workflowId: Swift.Int) -> QoreIDSDK.QoreIDParam
  public func ocrAcceptedDocuments(_ ocrAcceptedDocuments: Swift.Array<Swift.String>?) -> QoreIDSDK.QoreIDParam
  public func build() -> QoreIDSDK.QoreIDParam
  @objc deinit
}
public struct InputData {
  public init(applicant: QoreIDSDK.ApplicantData? = nil, address: QoreIDSDK.AddressData? = nil, identity: QoreIDSDK.IdentityData? = nil)
}
public class ApplicantData {
  public init(firstname: Swift.String? = nil, lastname: Swift.String? = nil, phone: Swift.String? = nil, middlename: Swift.String? = nil, dob: Swift.String? = nil, email: Swift.String? = nil, gender: Swift.String? = nil, idType: Swift.String? = nil, idNumber: Swift.String? = nil, phoneCountryCode: Swift.String? = nil)
  @objc deinit
}
public struct AddressData {
  public init(address: Swift.String? = nil, city: Swift.String? = nil, lga: Swift.String? = nil, state: Swift.String? = nil, region: Swift.String? = nil, district: Swift.String? = nil, county: Swift.String? = nil, subCounty: Swift.String? = nil, constituency: Swift.String? = nil, municipality: Swift.String? = nil, zone: Swift.String? = nil, digitalAddress: Swift.String? = nil, town: Swift.String? = nil, ccc: Swift.String = "")
}
public struct IdentityData {
  public init(idType: Swift.String? = nil, idNumber: Swift.String? = nil)
}
@_hasMissingDesignatedInitializers public class DefaultsKey {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Key<ValueType> : QoreIDSDK.DefaultsKey where ValueType : Swift.Decodable, ValueType : Swift.Encodable {
  public init(_ key: Swift.String)
  @objc deinit
}
final public class Defaults {
  public static let shared: QoreIDSDK.Defaults
  public init(userDefaults: Foundation.UserDefaults = UserDefaults.standard)
  final public func clear<ValueType>(_ key: QoreIDSDK.Key<ValueType>) where ValueType : Swift.Decodable, ValueType : Swift.Encodable
  final public func has<ValueType>(_ key: QoreIDSDK.Key<ValueType>) -> Swift.Bool where ValueType : Swift.Decodable, ValueType : Swift.Encodable
  final public func get<ValueType>(for key: QoreIDSDK.Key<ValueType>) -> ValueType? where ValueType : Swift.Decodable, ValueType : Swift.Encodable
  final public func set<ValueType>(_ value: ValueType, for key: QoreIDSDK.Key<ValueType>) where ValueType : Swift.Decodable, ValueType : Swift.Encodable
  final public func removeAll(bundle: Foundation.Bundle = Bundle.main)
  @objc deinit
}
extension QoreIDSDK.Defaults {
  final public func get<ValueType>(for key: QoreIDSDK.Key<ValueType>) -> ValueType? where ValueType : Swift.Decodable, ValueType : Swift.Encodable, ValueType : Swift.RawRepresentable, ValueType.RawValue : Swift.Decodable, ValueType.RawValue : Swift.Encodable
  final public func set<ValueType>(_ value: ValueType, for key: QoreIDSDK.Key<ValueType>) where ValueType : Swift.Decodable, ValueType : Swift.Encodable, ValueType : Swift.RawRepresentable, ValueType.RawValue : Swift.Decodable, ValueType.RawValue : Swift.Encodable
}
@_hasMissingDesignatedInitializers public class Countries {
  public static func getAllCountries() -> [QoreIDSDK.Country]
  public static func getCountriesByFirstLetter() -> [(Swift.String, [QoreIDSDK.Country])]
  public static func getCountriesWithPhone() -> [QoreIDSDK.Country]
  public static func getCountriesByCountryCode(countryCode: Swift.String = "NG") -> [QoreIDSDK.Country]
  public static func getCountriesByPhoneCode() -> [QoreIDSDK.Country]
  public static func searchForCountryByName(data: [QoreIDSDK.Country], searchString: Swift.String) -> [QoreIDSDK.Country]
  @objc deinit
}
extension QoreIDSDK.Countries {
  public static var countryInfoDictionary: [Swift.String : [Swift.String : Any]]
}
public class Country {
  public var name: Swift.String
  public var phoneExtension: Swift.String?
  public var flag: Swift.String?
  public var countryCode: Swift.String
  public var isMain: Swift.Bool?
  public init(name: Swift.String, phoneExtension: Swift.String?, flag: Swift.String, countryCode: Swift.String, isMain: Swift.Bool?)
  @objc deinit
}
public struct ResultData {
}
public enum ErrorCode {
  case E_GENERAL
  case E_MISSING_SDK_PARAM
  case E_AUTH
  case E_PERMISSION
  case E_UNKNOWN
  case E_VERIFICATION_FAILED
  case E_USER_CANCELED
  case E_UNAUTHORIZED
  public static func == (a: QoreIDSDK.ErrorCode, b: QoreIDSDK.ErrorCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol QoreIDResult {
}
public struct SuccessResult : QoreIDSDK.QoreIDResult {
  public var message: Swift.String?
  public var data: QoreIDSDK.ResultData?
}
public struct ErrorResult : QoreIDSDK.QoreIDResult {
  public var message: Swift.String
  public var code: QoreIDSDK.ErrorCode
  public var data: QoreIDSDK.ResultData?
}
public enum SheetSize {
  case fixed(CoreFoundation.CGFloat)
  case halfScreen
  case fullScreen
}
public struct QoreIdSdk {
  public static let shared: QoreIDSDK.QoreIdSdk
  public func launch(param: QoreIDSDK.QoreIDParam, vc: UIKit.UIViewController, onResult: ((any QoreIDSDK.QoreIDResult) -> ())?)
}
@_hasMissingDesignatedInitializers final public class PartialFormatter {
  convenience public init(phoneNumberKit: QoreIDSDK.PhoneNumberKit = PhoneNumberKit(), defaultRegion: Swift.String = PhoneNumberKit.defaultRegionCode(), withPrefix: Swift.Bool = true, maxDigits: Swift.Int? = nil, ignoreIntlNumbers: Swift.Bool = false)
  final public var defaultRegion: Swift.String {
    get
    set
  }
  final public var maxDigits: Swift.Int?
  final public var currentRegion: Swift.String {
    get
  }
  final public func nationalNumber(from rawNumber: Swift.String) -> Swift.String
  final public func formatPartial(_ rawNumber: Swift.String) -> Swift.String
  @objc deinit
}
public enum PhoneNumberDecodingStrategy {
  case properties
  case e164
  public static var `default`: QoreIDSDK.PhoneNumberDecodingStrategy
  public static func == (a: QoreIDSDK.PhoneNumberDecodingStrategy, b: QoreIDSDK.PhoneNumberDecodingStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PhoneNumberEncodingStrategy {
  case properties
  case e164
  public static var `default`: QoreIDSDK.PhoneNumberEncodingStrategy
  public static func == (a: QoreIDSDK.PhoneNumberEncodingStrategy, b: QoreIDSDK.PhoneNumberEncodingStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PhoneNumberDecodingUtils {
  public static var defaultPhoneNumberKit: () -> QoreIDSDK.PhoneNumberKit
}
public enum PhoneNumberEncodingUtils {
  public static var defaultPhoneNumberKit: () -> QoreIDSDK.PhoneNumberKit
}
extension Foundation.JSONDecoder {
  public var phoneNumberDecodingStrategy: QoreIDSDK.PhoneNumberDecodingStrategy {
    get
    set
  }
  public var phoneNumberKit: () -> QoreIDSDK.PhoneNumberKit {
    get
    set
  }
}
extension Foundation.JSONEncoder {
  public var phoneNumberEncodingStrategy: QoreIDSDK.PhoneNumberEncodingStrategy {
    get
    set
  }
  public var phoneNumberKit: () -> QoreIDSDK.PhoneNumberKit {
    get
    set
  }
}
extension QoreIDSDK.PhoneNumber : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension QoreIDSDK.MetadataTerritory {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case codeID
    case countryCode
    case internationalPrefix
    case mainCountryForCode
    case nationalPrefix
    case nationalPrefixFormattingRule
    case nationalPrefixForParsing
    case nationalPrefixTransformRule
    case preferredExtnPrefix
    case emergency
    case fixedLine
    case generalDesc
    case mobile
    case pager
    case personalNumber
    case premiumRate
    case sharedCost
    case tollFree
    case voicemail
    case voip
    case uan
    case numberFormats
    case leadingDigits
    case availableFormats
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension QoreIDSDK.MetadataPhoneNumberFormat {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case pattern
    case format
    case intlFormat
    case leadingDigitsPatterns
    case nationalPrefixFormattingRule
    case nationalPrefixOptionalWhenFormatting
    case domesticCarrierCodeFormattingRule
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func setUpButton(text: Swift.String = "", font: UIKit.UIFont = .systemFont14Regular, color: UIKit.UIColor = .white, cornerRadius: CoreFoundation.CGFloat = 10)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func setUpView(bgColor: UIKit.UIColor = .clear, cornerRadius: CoreFoundation.CGFloat = 0.0)
}
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public func setUpNormalTextField(_ prop: QoreIDSDK.TextFieldProps)
  @_Concurrency.MainActor(unsafe) public func setLeftPaddingPoints(_ amount: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func setRightPaddingPoints(_ amount: CoreFoundation.CGFloat)
}
public struct TextFieldProps {
  public let placeholderString: Swift.String
  public let secureTextEntry: Swift.Bool
  public let keyboard_type: UIKit.UIKeyboardType
  public let disPlayTextColor: UIKit.UIColor
  public let placehHolderColor: UIKit.UIColor
  public let backgroundColor: UIKit.UIColor
  public let font: UIKit.UIFont
  public let outlineColor: UIKit.UIColor
  public let cornerRadius: CoreFoundation.CGFloat
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public func setUpGenLabel(text: Swift.String, textColor: UIKit.UIColor = UIColor.textColor, font: UIKit.UIFont, numberOfLines: Swift.Int = 1, textAlignment: UIKit.NSTextAlignment = .left)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func simpleAlert(alertType: UIKit.UIAlertController.Style? = .alert, title: Swift.String?, message: Swift.String = "", action: (() -> ())? = nil)
  @_Concurrency.MainActor(unsafe) public func setUpNavigationTitle(_ title: Swift.String?)
}
public enum CameraState {
  case ready, accessDenied, noDeviceFound, notDetermined
  public static func == (a: QoreIDSDK.CameraState, b: QoreIDSDK.CameraState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CameraDevice {
  case front, back
  public static func == (a: QoreIDSDK.CameraDevice, b: QoreIDSDK.CameraDevice) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CameraFlashMode : Swift.Int {
  case off, on, auto
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CameraOutputMode {
  case stillImage, videoWithMic, videoOnly
  public static func == (a: QoreIDSDK.CameraOutputMode, b: QoreIDSDK.CameraOutputMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CaptureResult {
  case success(content: QoreIDSDK.CaptureContent)
  case failure(any Swift.Error)
}
public enum CaptureContent {
  case imageData(Foundation.Data)
  case image(UIKit.UIImage)
  case asset(Photos.PHAsset)
}
extension QoreIDSDK.CaptureContent {
  public var asImage: UIKit.UIImage? {
    get
  }
  public var asData: Foundation.Data? {
    get
  }
}
public enum CaptureError : Swift.Error {
  case noImageData
  case invalidImageData
  case noVideoConnection
  case noSampleBuffer
  case assetNotSaved
  public static func == (a: QoreIDSDK.CaptureError, b: QoreIDSDK.CaptureError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CameraManager : ObjectiveC.NSObject, AVFoundation.AVCaptureFileOutputRecordingDelegate, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) open var imageAlbumName: Swift.String?
  @_Concurrency.MainActor(unsafe) open var videoAlbumName: Swift.String?
  @_Concurrency.MainActor(unsafe) open var captureSession: AVFoundation.AVCaptureSession?
  @_Concurrency.MainActor(unsafe) open var showErrorsToUsers: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var showAccessPermissionPopupAutomatically: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var showErrorBlock: (_ erTitle: Swift.String, _ erMessage: Swift.String) -> Swift.Void
  @_Concurrency.MainActor(unsafe) open func canSetPreset(preset: AVFoundation.AVCaptureSession.Preset) -> Swift.Bool?
  @_Concurrency.MainActor(unsafe) open var writeFilesToPhoneLibrary: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var shouldRespondToOrientationChanges: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var shouldFlipFrontCameraImage: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var shouldKeepViewAtOrientationChanges: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var shouldEnableTapToFocus: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var shouldEnablePinchToZoom: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var shouldEnableExposure: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var cameraIsReady: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var hasFrontCamera: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var hasFlash: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var animateCameraDeviceChange: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var animateShutter: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var shouldUseLocationServices: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var cameraDevice: QoreIDSDK.CameraDevice {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var flashMode: QoreIDSDK.CameraFlashMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var cameraOutputQuality: AVFoundation.AVCaptureSession.Preset {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var cameraOutputMode: QoreIDSDK.CameraOutputMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var recordedDuration: CoreMedia.CMTime {
    get
  }
  @_Concurrency.MainActor(unsafe) open var recordedFileSize: Swift.Int64 {
    get
  }
  @_Concurrency.MainActor(unsafe) open var focusMode: AVFoundation.AVCaptureDevice.FocusMode
  @_Concurrency.MainActor(unsafe) open var exposureMode: AVFoundation.AVCaptureDevice.ExposureMode
  @_Concurrency.MainActor(unsafe) open var videoStabilisationMode: AVFoundation.AVCaptureVideoStabilizationMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var activeVideoStabilisationMode: AVFoundation.AVCaptureVideoStabilizationMode {
    get
  }
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func addPreviewLayerToView(_ view: UIKit.UIView) -> QoreIDSDK.CameraState
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func addPreviewLayerToView(_ view: UIKit.UIView, newCameraOutputMode: QoreIDSDK.CameraOutputMode) -> QoreIDSDK.CameraState
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func addLayerPreviewToView(_ view: UIKit.UIView, newCameraOutputMode: QoreIDSDK.CameraOutputMode, completion: (() -> Swift.Void)?) -> QoreIDSDK.CameraState
  @_Concurrency.MainActor(unsafe) open func zoom(_ scale: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) open func askUserForCameraPermission(_ completion: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) open func stopCaptureSession()
  @_Concurrency.MainActor(unsafe) open func resumeCaptureSession()
  @_Concurrency.MainActor(unsafe) open func stopAndRemoveCaptureSession()
  @available(*, deprecated)
  @_Concurrency.MainActor(unsafe) open func capturePictureWithCompletion(_ imageCompletion: @escaping (UIKit.UIImage?, Foundation.NSError?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) open func capturePictureWithCompletion(_ imageCompletion: @escaping (QoreIDSDK.CaptureResult) -> Swift.Void)
  @available(*, deprecated)
  @_Concurrency.MainActor(unsafe) open func capturePictureDataWithCompletion(_ imageCompletion: @escaping (Foundation.Data?, Foundation.NSError?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) open func capturePictureDataWithCompletion(_ imageCompletion: @escaping (QoreIDSDK.CaptureResult) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) open func startRecordingVideo()
  @_Concurrency.MainActor(unsafe) open func stopVideoRecording(_ completion: ((_ videoURL: Foundation.URL?, _ error: Foundation.NSError?) -> Swift.Void)?)
  public typealias QRCodeDetectionHandler = (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void
  @_Concurrency.MainActor(unsafe) open func startQRCodeDetection(_ handler: @escaping QoreIDSDK.CameraManager.QRCodeDetectionHandler)
  @_Concurrency.MainActor(unsafe) open func stopQRCodeDetection()
  @_Concurrency.MainActor(unsafe) open func deviceOrientationMatchesInterfaceOrientation() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func currentCameraStatus() -> QoreIDSDK.CameraState
  @_Concurrency.MainActor(unsafe) open func changeFlashMode() -> QoreIDSDK.CameraFlashMode
  @_Concurrency.MainActor(unsafe) open func hasFlash(for cameraDevice: QoreIDSDK.CameraDevice) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func fileOutput(_: AVFoundation.AVCaptureFileOutput, didStartRecordingTo _: Foundation.URL, from _: [AVFoundation.AVCaptureConnection])
  @_Concurrency.MainActor(unsafe) @objc open func fileOutput(_: AVFoundation.AVCaptureFileOutput, didFinishRecordingTo outputFileURL: Foundation.URL, from _: [AVFoundation.AVCaptureConnection], error: (any Swift.Error)?)
  @_Concurrency.MainActor(unsafe) @objc open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func resetOrientation()
  @_Concurrency.MainActor(unsafe) open func _doFlipAnimation()
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CameraLocationManager : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
    @objc public func locationManager(_: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
    @objc public func locationManager(_: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
    @objc deinit
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
}
extension QoreIDSDK.CameraManager : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func metadataOutput(_: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from _: AVFoundation.AVCaptureConnection)
}
extension Foundation.Data {
  public func printExifData()
}
extension Swift.Optional {
  public func or(other: Wrapped) -> Wrapped
}
public enum NotificationName : Swift.String {
  case IHProgressHUDDidReceiveTouchEvent, IHProgressHUDDidTouchDownInside, IHProgressHUDWillDisappear, IHProgressHUDDidDisappear, IHProgressHUDWillAppear, IHProgressHUDDidAppear, IHProgressHUDStatusUserInfoKey
  public func getNotificationName() -> Foundation.Notification.Name
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum IHProgressHUDStyle : Swift.Int {
  case light
  case dark
  case custom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IHProgressHUDMaskType : Swift.Int {
  case none
  case clear
  case black
  case gradient
  case custom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IHProgressHUDAnimationType : Swift.Int {
  case flat
  case native
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class IHProgressHUD : UIKit.UIView {
  @objc deinit
}
extension QoreIDSDK.IHProgressHUD {
  @_Concurrency.MainActor(unsafe) public class func set(defaultStyle style: QoreIDSDK.IHProgressHUDStyle)
  @_Concurrency.MainActor(unsafe) public class func setHUD(backgroundColor color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public class func set(defaultMaskType maskType: QoreIDSDK.IHProgressHUDMaskType)
  @_Concurrency.MainActor(unsafe) public class func set(defaultAnimationType type: QoreIDSDK.IHProgressHUDAnimationType)
  @_Concurrency.MainActor(unsafe) public class func set(status: Swift.String?)
  @_Concurrency.MainActor(unsafe) public class func set(containerView: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) public class func set(minimumSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) public class func set(ringThickness: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public class func set(ringRadius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public class func setRing(noTextRingRadius radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public class func set(cornerRadius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public class func set(borderColor color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public class func set(borderWidth width: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public class func set(font: UIKit.UIFont)
  @_Concurrency.MainActor(unsafe) public class func set(foregroundColor color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public class func set(backgroundColor color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public class func set(backgroundLayerColor color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public class func set(imageViewSize size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) public class func set(shouldTintImages: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public class func set(infoImage image: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) public class func setSuccessImage(successImage image: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) public class func setErrorImage(errorImage image: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) public class func set(viewForExtension view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public class func set(graceTimeInterval interval: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) public class func set(minimumDismiss interval: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) public class func set(maximumDismissTimeInterval interval: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) public class func setFadeInAnimationDuration(fadeInAnimationDuration duration: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) public class func setFadeOutAnimationDuration(fadeOutAnimationDuration duration: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) public class func setMaxSupportedWindowLevel(maxSupportedWindowLevel windowLevel: UIKit.UIWindow.Level)
  @_Concurrency.MainActor(unsafe) public class func setHapticsEnabled(hapticsEnabled: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public class func show()
  @_Concurrency.MainActor(unsafe) public class func show(withStatus status: Swift.String?)
  @_Concurrency.MainActor(unsafe) public class func show(progress: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public class func show(progress: CoreFoundation.CGFloat, status: Swift.String?)
  @_Concurrency.MainActor(unsafe) public class func setOffsetFromCenter(_ offset: UIKit.UIOffset)
  @_Concurrency.MainActor(unsafe) public class func resetOffsetFromCenter()
  @_Concurrency.MainActor(unsafe) public class func popActivity()
  @_Concurrency.MainActor(unsafe) public class func dismiss()
  @_Concurrency.MainActor(unsafe) public class func dismissWithCompletion(_ completion: (() -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public class func dismissWithDelay(_ delay: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) public class func dismissWithDelay(_ delay: Foundation.TimeInterval, completion: (() -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public class func isVisible() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public class func displayDurationForString(_ string: Swift.String?) -> Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) public class func showInfowithStatus(_ status: Swift.String?)
  @_Concurrency.MainActor(unsafe) public class func showImage(_ image: UIKit.UIImage, status: Swift.String?)
  @_Concurrency.MainActor(unsafe) public class func showSuccesswithStatus(_ status: Swift.String?)
  @_Concurrency.MainActor(unsafe) public class func showError(withStatus status: Swift.String?)
}
extension QoreIDSDK.PhoneNumber {
  public func adjustedNationalNumber() -> Swift.String
}
extension QoreIDSDK.EnvironmentConfig : Swift.Equatable {}
extension QoreIDSDK.EnvironmentConfig : Swift.Hashable {}
extension QoreIDSDK.PhoneNumberFormat : Swift.Equatable {}
extension QoreIDSDK.PhoneNumberFormat : Swift.Hashable {}
extension QoreIDSDK.PhoneNumberType : Swift.Equatable {}
extension QoreIDSDK.PhoneNumberType : Swift.Hashable {}
extension QoreIDSDK.PhoneNumberType : Swift.RawRepresentable {}
extension QoreIDSDK.PossibleLengthType : Swift.Equatable {}
extension QoreIDSDK.PossibleLengthType : Swift.Hashable {}
extension QoreIDSDK.PossibleLengthType : Swift.RawRepresentable {}
extension QoreIDSDK.ErrorCode : Swift.Equatable {}
extension QoreIDSDK.ErrorCode : Swift.Hashable {}
extension QoreIDSDK.PhoneNumberDecodingStrategy : Swift.Equatable {}
extension QoreIDSDK.PhoneNumberDecodingStrategy : Swift.Hashable {}
extension QoreIDSDK.PhoneNumberEncodingStrategy : Swift.Equatable {}
extension QoreIDSDK.PhoneNumberEncodingStrategy : Swift.Hashable {}
extension QoreIDSDK.MetadataTerritory.CodingKeys : Swift.Equatable {}
extension QoreIDSDK.MetadataTerritory.CodingKeys : Swift.Hashable {}
extension QoreIDSDK.MetadataTerritory.CodingKeys : Swift.RawRepresentable {}
extension QoreIDSDK.MetadataPhoneNumberFormat.CodingKeys : Swift.Equatable {}
extension QoreIDSDK.MetadataPhoneNumberFormat.CodingKeys : Swift.Hashable {}
extension QoreIDSDK.MetadataPhoneNumberFormat.CodingKeys : Swift.RawRepresentable {}
extension QoreIDSDK.CameraState : Swift.Equatable {}
extension QoreIDSDK.CameraState : Swift.Hashable {}
extension QoreIDSDK.CameraDevice : Swift.Equatable {}
extension QoreIDSDK.CameraDevice : Swift.Hashable {}
extension QoreIDSDK.CameraFlashMode : Swift.Equatable {}
extension QoreIDSDK.CameraFlashMode : Swift.Hashable {}
extension QoreIDSDK.CameraFlashMode : Swift.RawRepresentable {}
extension QoreIDSDK.CameraOutputMode : Swift.Equatable {}
extension QoreIDSDK.CameraOutputMode : Swift.Hashable {}
extension QoreIDSDK.CaptureError : Swift.Equatable {}
extension QoreIDSDK.CaptureError : Swift.Hashable {}
extension QoreIDSDK.NotificationName : Swift.Equatable {}
extension QoreIDSDK.NotificationName : Swift.Hashable {}
extension QoreIDSDK.NotificationName : Swift.RawRepresentable {}
extension QoreIDSDK.IHProgressHUDStyle : Swift.Equatable {}
extension QoreIDSDK.IHProgressHUDStyle : Swift.Hashable {}
extension QoreIDSDK.IHProgressHUDStyle : Swift.RawRepresentable {}
extension QoreIDSDK.IHProgressHUDMaskType : Swift.Equatable {}
extension QoreIDSDK.IHProgressHUDMaskType : Swift.Hashable {}
extension QoreIDSDK.IHProgressHUDMaskType : Swift.RawRepresentable {}
extension QoreIDSDK.IHProgressHUDAnimationType : Swift.Equatable {}
extension QoreIDSDK.IHProgressHUDAnimationType : Swift.Hashable {}
extension QoreIDSDK.IHProgressHUDAnimationType : Swift.RawRepresentable {}
